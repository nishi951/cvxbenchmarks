{% extends "utils/problem.j2" %}
{% import "utils/helpers.j2" as helpers}

{% block vars %}
import scipy.sparse as sps

{{ helpers.normalized_data_matrix() }}
{{ helpers.create_classification() }}

np.random.seed({{ seed }})
m = {{ m }}
n = {{ n }}
rho = {{ rho }}
mu = {{ mu }}

A, b = create_classification(m, n, rho = rho, mu = mu)

ratio = float(np.sum(b==1)) / len(b)
lambda_max = np.abs((1-ratio)*A[b==1,:].sum(axis=0) +
                    ratio*A[b==-1,:].sum(axis=0)).max()
lam = 0.5*lambda_max
{% endblock %}

{% block problem %}
x = cp.Variable(A.shape[1])
def logistic_loss(theta, X, y):
    if not all(np.unique(y) == [-1, 1]):
        raise ValueError("y must have binary labels in {-1,1}")
    return cp.sum_entries(cp.logistic(-sps.diags([y],[0])*X*theta))

f = logistic_loss(x, A, b) + lam*cp.norm1(x)
prob = cp.Problem(cp.Minimize(f))
{% endblock %}