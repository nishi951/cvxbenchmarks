{% extends "problem.j2" %}

{% block vars %}
def infinite_push(theta, Xp, Xn):
    m, d = Xp.shape
    n = Xn.shape[0]
    Z = cp.max_elemwise(
        1 - (Xp*theta*np.ones((1,n)) - (Xn*theta*np.ones((1,m))).T), 0)
    return cp.max_entries(cp.sum_entries(Z, axis=0))

def normalized_data_matrix(m, n, mu):
    if mu == 1:
        # dense
        A = np.random.randn(m, n)
        A /= np.sqrt(np.sum(A**2, 0))
    else:
        # sparse
        A = sps.rand(m, n, mu)
        A.data = np.random.randn(A.nnz)
        N = A.copy()
        N.data = N.data**2
        A = A*sps.diags([1 / np.sqrt(np.ravel(N.sum(axis=0)))], [0])

    return A

m = {{ m }}
n = {{ n }}
d = {{ d }}
np.random.seed({{ seed }})

Xp = normalized_data_matrix(m, d, 1)
Xn = normalized_data_matrix(n, d, 1)
lam = 1

theta = cp.Variable(d)
f = infinite_push(theta, Xp, Xn) + lam*cp.sum_squares(theta)
{% endblock %}

{% block problem %}
prob = cp.Problem(cp.Minimize(f))
{% endblock %}