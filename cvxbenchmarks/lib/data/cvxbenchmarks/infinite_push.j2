{% extends "utils/problem.j2" %}
{% import "utils/helpers.j2" as helpers %}

{% block vars %}

{{ helpers.normalized_data_matrix() }}

m = {{ m }}
n = {{ n }}
d = {{ d }}
np.random.seed({{ seed }})

Xp = normalized_data_matrix(m, d, 1)
Xn = normalized_data_matrix(n, d, 1)
lam = 1
{% endblock %}

{% block problem %}
def infinite_push(theta, Xp, Xn):
    m, d = Xp.shape
    n = Xn.shape[0]
    Z = cp.max_elemwise(
        1 - (Xp*theta*np.ones((1,n)) - (Xn*theta*np.ones((1,m))).T), 0)
    return cp.max_entries(cp.sum_entries(Z, axis=0))

theta = cp.Variable(d)
f = infinite_push(theta, Xp, Xn) + lam*cp.sum_squares(theta)
prob = cp.Problem(cp.Minimize(f))
{% endblock %}