{% extends "problem.j2" %}

{% block vars %}
import scipy.sparse as sps

def normalized_data_matrix(m, n, mu):
    if mu == 1:
        # dense
        A = np.random.randn(m, n)
        A /= np.sqrt(np.sum(A**2, 0))
    else:
        # sparse
        A = sps.rand(m, n, mu)
        A.data = np.random.randn(A.nnz)
        N = A.copy()
        N.data = N.data**2
        A = A*sps.diags([1 / np.sqrt(np.ravel(N.sum(axis=0)))], [0])

    return A
np.random.seed({{ seed }})
k = {{ k }}  #class
m = {{ m }}  #instance
n = {{ n }}  #dim
p = 5   #p-largest
X = normalized_data_matrix(m,n,1)
Y = np.random.randint(0, k, m)

Theta = cp.Variable(n,k)
t = cp.Variable(1)
texp = cp.Variable(m)
{% endblock %}

{% block problem %}
Theta = cp.Variable(n,k)
beta = cp.Variable(1,k)
obs = cp.vstack([-(X[i]*Theta + beta)[Y[i]] + cp.log_sum_exp(X[i]*Theta + beta) for i in range(m)])
prob = cp.Problem(cp.Minimize(cp.sum_largest(obs, p) + cp.sum_squares(Theta)))
{% endblock %}