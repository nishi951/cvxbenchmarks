{% extends "utils/problem.j2" %}
{% import "utils/helpers.j2" as helpers %}

{% block vars %}
import scipy.sparse as sps

{{ helpers.normalized_data_matrix() }}

np.random.seed({{ seed }})
k = {{ k }}  #class
m = {{ m }}  #instance
n = {{ n }}  #dim
p = 5   #p-largest
X = normalized_data_matrix(m,n,1)
Y = np.random.randint(0, k, m)
{% endblock %}

{% block problem %}
Theta = cp.Variable(n,k)
beta = cp.Variable(1,k)
obs = cp.vstack([-(X[i]*Theta + beta)[Y[i]] + cp.log_sum_exp(X[i]*Theta + beta) for i in range(m)])
prob = cp.Problem(cp.Minimize(cp.sum_largest(obs, p) + cp.sum_squares(Theta)))
{% endblock %}