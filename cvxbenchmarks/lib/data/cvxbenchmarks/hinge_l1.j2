{% extends "utils/problem.j2" %}
{% import "utils/helpers.j2" as helpers %}

{% block vars %}
import scipy.sparse as sps

{{ helpers.normalized_data_matrix() }}
{{ helpers.create_classification() }}


np.random.seed({{ seed }})

m = {{ m }}
n = {{ n }}
rho = {{ rho }}
sigma = 0.05
mu = {{ mu }}
lam = 0.5*sigma*np.sqrt(m*np.log(mu*n))

A, b = create_classification(m, n, rho=rho, mu=mu, sigma=sigma)
{% endblock %}

{% block problem %}
def hinge_loss(theta, X, y):
    if not all(np.unique(y) == [-1, 1]):
        raise ValueError("y must have binary labels in {-1,1}")
    return cp.sum_entries(cp.max_elemwise(1 - sps.diags([y],[0])*X*theta, 0))

x = cp.Variable(A.shape[1])
f = hinge_loss(x, A, b) + lam*cp.norm1(x)
prob = cp.Problem(cp.Minimize(f))
{% endblock %}