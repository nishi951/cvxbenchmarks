{% extends "utils/problem.j2" %}

{% block vars %}
np.random.seed({{ seed }})
n = {{ n }}
gamma = {{ gamma }}

mu = np.exp(np.random.normal(0, 1, n))
# Generate S as FF^T + D
F = np.random.normal(0, 0.1, [n, n])
D = np.diag(0.1*np.random.rand(n)+ 0.1)

S = F*F.T + D

x = cp.Variable(n)
{% endblock %}


{% block problem %}
objective = cp.Maximize(mu*x - gamma*cp.quad_form(x,S))
constraints = [cp.sum_entries(x) == 1, x >= 0]

prob = cp.Problem(objective, constraints)
{% endblock %}
