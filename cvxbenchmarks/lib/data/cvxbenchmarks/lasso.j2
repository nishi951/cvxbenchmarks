{% extends "utils/problem.j2" %}
{% import "utils/helpers.j2" as helpers %}

{% block vars %}
import scipy.sparse as sps

{{ helpers.normalized_data_matrix() }}
{{ helpers.create_regression() }}

m = {{ m }}
n = {{ n }}
rho = {{ rho }}
mu = {{ mu }}
k = {{ k }}
np.random.seed({{ seed }})

A, B = create_regression(m, n, k = k, rho = rho, mu = mu)
lambda_max = np.abs(A.T.dot(B)).max()
lam = 0.5*lambda_max
{% endblock %}

{% block problem %}
X = cp.Variable(A.shape[1], B.shape[1] if len(B.shape) > 1 else 1)
f = cp.sum_squares(A*X - B) + lam*cp.norm1(X)
prob = cp.Problem(cp.Minimize(f))
{% endblock %}