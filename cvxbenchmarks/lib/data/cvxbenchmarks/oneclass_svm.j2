{% extends "utils/problem.j2" %}

{% block vars %}
np.random.seed({{ seed }})
m = {{ m }}
n = {{ n }}


# Generate random points uniform over hypersphere
A = np.random.randn(m, n)
A /= np.sqrt(np.sum(A**2, axis=1))[:,np.newaxis] # Normalize each row of A
A *= (np.random.rand(m)**(1./n))[:,np.newaxis]

# Shift points and add some outliers
# NOTE(mwytock): causes problems for operator splitting, should fix
#x0 = np.random.randn(n)
x0 = np.zeros(n)
A += x0

k = max(m//50, 1)
idx = np.random.randint(0, m, k)
A[idx, :] += np.random.randn(k, n)
lam = 1
{% endblock %}

{% block problem %}
x = cp.Variable(n)
rho = cp.Variable(1)

# Straightforward expression
z = np.sum(A**2, axis=1) - 2*A*x + cp.sum_squares(x)  # z_i = ||a_i - x||^2
f = cp.sum_entries(cp.max_elemwise(z - rho, 0)) + lam*cp.max_elemwise(0, rho)
prob = cp.Problem(cp.Minimize(f), C)
{% endblock %}